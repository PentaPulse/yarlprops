rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    match /systemusers/{userId} {
      allow get: if request.resource.data.keys().hasOnly(['displayName']);
      allow create:if request.auth != null;
      allow read: if request.auth != null;
      allow update: if isUser(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);

      match /orders/{orderId} {
        allow read , write : if request.auth!=null;
      }
      match /notifications/{notificationId}{
        allow read,write :if request.auth != null;
      }

      match /customerorders/{orderId}{
      allow read,write:if true;
      }
      match /feedbacks/{id}{
       allow read;//:if request.auth != null;
       allow write: if isUser(request.auth.uid)
      }
      match /reviews/{id}{
      allow read,write:if request.auth.uid== userId;
      }
    }

    match /admins/{aid}{
      allow create:if request.auth != null;
      allow read,update,delete: if isAdmin(request.auth.uid);

      match /items/{itemId}{
        allow write :if request.auth != null;
        allow read : if isAdmin(request.auth.uid)
      }
      match /users/{userId}{
        allow write : if request.auth != null ;
        allow read : if isAdmin(request.auth.uid)
      }
    }

    match /contactus/{id}{
      allow read,update:if isAdmin(request.auth.uid);
      allow write:if true;
    }

    match /orders/{id}{
      allow read , write : if request.auth!=null;
    }

    match /products/{productId} {
      allow read: if true;
      allow write;//:if isMerchant(request.auth.uid)||isAdmin(request.auth.uid);
      //allow write, update, delete: if request.auth != null && 
      //(request.auth.uid == resource.data.merchantId || isAdmin(request.auth.uid));
    }

    match /services/{serviceId}{
      allow read;//: if true;

      allow write, update, delete;//: if request.auth != null && (request.auth.uid == resource.data.merchantId|| isAdmin(request.auth.uid));
    }

    match /rentals/{rentalId}{
      allow read;//: if true;

      allow write, update, delete;//: if request.auth != null &&       (request.auth.uid == resource.data.merchantId || isAdmin(request.auth.uid));
    }
    match /logs/{userId} {
      allow read: if request.auth != null && request.auth.uid == userId;
      allow write;

      match /signinlogs/{logId} {
        allow read, write: if request.auth != null ;  
      }
      match /signoutlogs/{logId} {
        allow read : if request.auth != null && request.auth.uid == userId;  // Apply the same rule for sub-collection
        allow write;
      }
      match /products/{logId}{
        allow write: if request.auth != null;
        allow read : if isAdmin(request.auth.uid)
      }
      match /rentals/{logId}{
        allow write: if request.auth != null;
        allow read : if isAdmin(request.auth.uid)
      }
      match /services/{logId}{
        allow write: if request.auth != null;
        allow read : if isAdmin(request.auth.uid)
      }
    }

    match /site/{id}{
      allow read;
      allow write:if isAdmin(request.auth.uid)

      match /customers/{id}{
      allow read;
      allow write : if isAdmin(request.auth.uid)
      }
      match /merchants/{id}{
      allow read;
      allow write : if isAdmin(request.auth.uid)
      }
    }

    function isAdmin(userId) {
      return exists(/databases/$(database)/documents/admins/$(userId));
    }
    function isUser(userId) {
    return exists(/databases/$(database)/documents/systemusers/$(userId));
}

  }
}